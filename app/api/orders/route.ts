import { NextRequest, NextResponse } from 'next/server';import connectDB from '@/lib/db';import Order from '@/models/Order';export async function GET(req: NextRequest) {  try {    await connectDB();    const { searchParams } = new URL(req.url);    const userId = searchParams.get('user');    const restaurantId = searchParams.get('restaurant');    const query: Record<string, string> = {};    if (userId) query.user = userId;    if (restaurantId) query.restaurant = restaurantId;    const orders = await Order.find(query)      .sort({ createdAt: -1 })      .populate('restaurant', 'name')      .populate('items.menuItem', 'name');    return NextResponse.json({ success: true, data: orders });  } catch (error) {    console.error('Error fetching orders:', error);    return NextResponse.json(      { success: false, message: 'Failed to fetch orders' },      { status: 500 }    );  }}export async function POST(req: NextRequest) {  try {    await connectDB();    const body = await req.json();    const order = await Order.create(body);    return NextResponse.json(      { success: true, data: order },      { status: 201 }    );  } catch (error) {    console.error('Error creating order:', error);    if (error instanceof Error && 'name' in error && error.name === 'ValidationError' && 'errors' in error) {      const validationError = error as { errors: Record<string, { message: string }> };      const validationErrors = Object.values(validationError.errors).map(err => err.message);      return NextResponse.json(        { success: false, message: validationErrors.join(', ') },        { status: 400 }      );    }    return NextResponse.json(      { success: false, message: 'Failed to create order' },      { status: 500 }    );  }} 