import { NextRequest, NextResponse } from 'next/server';import connectDB from '@/lib/db';import Order from '@/models/Order';export async function GET(  req: NextRequest,  { params }: { params: { id: string } }) {  try {    await connectDB();    const orderId = params.id;    const order = await Order.findById(orderId)      .populate('restaurant', 'name image')      .populate('items.menuItem', 'name image price');    if (!order) {      return NextResponse.json(        { success: false, message: 'Order not found' },        { status: 404 }      );    }    return NextResponse.json({ success: true, data: order });  } catch (error) {    console.error('Error fetching order:', error);    return NextResponse.json(      { success: false, message: 'Failed to fetch order' },      { status: 500 }    );  }}export async function PATCH(  req: NextRequest,  { params }: { params: { id: string } }) {  try {    await connectDB();    const orderId = params.id;    const { status } = await req.json();    const order = await Order.findByIdAndUpdate(      orderId,      { status },      { new: true, runValidators: true }    );    if (!order) {      return NextResponse.json(        { success: false, message: 'Order not found' },        { status: 404 }      );    }    return NextResponse.json({ success: true, data: order });  } catch (error) {    console.error('Error updating order:', error);    if (error instanceof Error && 'name' in error && error.name === 'ValidationError' && 'errors' in error) {      const validationError = error as { errors: Record<string, { message: string }> };      const validationErrors = Object.values(validationError.errors).map(err => err.message);      return NextResponse.json(        { success: false, message: validationErrors.join(', ') },        { status: 400 }      );    }    return NextResponse.json(      { success: false, message: 'Failed to update order' },      { status: 500 }    );  }} 