import { NextRequest, NextResponse } from 'next/server';import connectDB from '@/lib/db';import Review from '@/models/Review';import Restaurant from '@/models/Restaurant';export async function GET(req: NextRequest) {  try {    await connectDB();    const { searchParams } = new URL(req.url);    const restaurantId = searchParams.get('restaurant');    const query: Record<string, string> = {};    if (restaurantId) query.restaurant = restaurantId;    const reviews = await Review.find(query)      .sort({ createdAt: -1 })      .populate('user', 'name');    return NextResponse.json({ success: true, data: reviews });  } catch (error) {    console.error('Error fetching reviews:', error);    return NextResponse.json(      { success: false, message: 'Failed to fetch reviews' },      { status: 500 }    );  }}export async function POST(req: NextRequest) {  try {    await connectDB();    const body = await req.json();    const restaurant = await Restaurant.findById(body.restaurant);    if (!restaurant) {      return NextResponse.json(        { success: false, message: 'Restaurant not found' },        { status: 404 }      );    }    const review = await Review.create(body);    await Restaurant.findByIdAndUpdate(      body.restaurant,      {         $push: { reviews: review._id },        $inc: { totalReviews: 1 }       }    );    const allReviews = await Review.find({ restaurant: body.restaurant });    const ratingSum = allReviews.reduce((sum, item) => sum + item.rating, 0);    const newRating = ratingSum / allReviews.length;    await Restaurant.findByIdAndUpdate(      body.restaurant,      { rating: newRating }    );    return NextResponse.json(      { success: true, data: review },      { status: 201 }    );  } catch (error) {    console.error('Error creating review:', error);    if (error instanceof Error && 'name' in error && error.name === 'ValidationError' && 'errors' in error) {      const validationError = error as { errors: Record<string, { message: string }> };      const validationErrors = Object.values(validationError.errors).map(err => err.message);      return NextResponse.json(        { success: false, message: validationErrors.join(', ') },        { status: 400 }      );    }    return NextResponse.json(      { success: false, message: 'Failed to create review' },      { status: 500 }    );  }} 