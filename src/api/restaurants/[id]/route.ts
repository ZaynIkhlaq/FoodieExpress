import { NextRequest, NextResponse } from 'next/server';import connectDB from '@/lib/db';import Restaurant from '@/models/Restaurant';import MenuItem from '@/models/MenuItem';export async function GET(  req: NextRequest,  { params }: { params: { id: string } }) {  try {    await connectDB();    const restaurant = await Restaurant.findById(params.id)      .populate({        path: 'reviews',        options: { sort: { createdAt: -1 }, limit: 5 }      });    if (!restaurant) {      return NextResponse.json(        { success: false, message: 'Restaurant not found' },        { status: 404 }      );    }    const menuItems = await MenuItem.find({ restaurant: params.id });    const restaurantWithMenu = {      ...restaurant.toObject(),      menuItems    };    return NextResponse.json({ success: true, data: restaurantWithMenu });  } catch (error) {    console.error('Error fetching restaurant:', error);    return NextResponse.json(      { success: false, message: 'Failed to fetch restaurant' },      { status: 500 }    );  }}export async function PUT(  req: NextRequest,  { params }: { params: { id: string } }) {  try {    await connectDB();    const body = await req.json();    const restaurant = await Restaurant.findByIdAndUpdate(      params.id,      body,      { new: true, runValidators: true }    );    if (!restaurant) {      return NextResponse.json(        { success: false, message: 'Restaurant not found' },        { status: 404 }      );    }    return NextResponse.json({ success: true, data: restaurant });  } catch (error: any) {    console.error('Error updating restaurant:', error);    if (error.name === 'ValidationError') {      const validationErrors = Object.values(error.errors).map((err: any) => err.message);      return NextResponse.json(        { success: false, message: validationErrors.join(', ') },        { status: 400 }      );    }    return NextResponse.json(      { success: false, message: 'Failed to update restaurant' },      { status: 500 }    );  }}export async function DELETE(  req: NextRequest,  { params }: { params: { id: string } }) {  try {    await connectDB();    const restaurant = await Restaurant.findByIdAndDelete(params.id);    if (!restaurant) {      return NextResponse.json(        { success: false, message: 'Restaurant not found' },        { status: 404 }      );    }    await MenuItem.deleteMany({ restaurant: params.id });    return NextResponse.json({      success: true,      message: 'Restaurant deleted successfully'    });  } catch (error) {    console.error('Error deleting restaurant:', error);    return NextResponse.json(      { success: false, message: 'Failed to delete restaurant' },      { status: 500 }    );  }} 