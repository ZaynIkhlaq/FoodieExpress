import { NextRequest, NextResponse } from 'next/server';import connectDB from '@/lib/db';import Review from '@/models/Review';import Restaurant from '@/models/Restaurant';export async function GET(  req: NextRequest,  { params }: { params: { id: string } }) {  try {    await connectDB();    const review = await Review.findById(params.id)      .populate('user', 'name')      .populate('restaurant', 'name');    if (!review) {      return NextResponse.json(        { success: false, message: 'Review not found' },        { status: 404 }      );    }    return NextResponse.json({ success: true, data: review });  } catch (error) {    console.error('Error fetching review:', error);    return NextResponse.json(      { success: false, message: 'Failed to fetch review' },      { status: 500 }    );  }}export async function PUT(  req: NextRequest,  { params }: { params: { id: string } }) {  try {    await connectDB();    const body = await req.json();    const review = await Review.findByIdAndUpdate(      params.id,      body,      { new: true, runValidators: true }    );    if (!review) {      return NextResponse.json(        { success: false, message: 'Review not found' },        { status: 404 }      );    }    const restaurantId = review.restaurant;    const allReviews = await Review.find({ restaurant: restaurantId });    const ratingSum = allReviews.reduce((sum, item) => sum + item.rating, 0);    const newRating = ratingSum / allReviews.length;    await Restaurant.findByIdAndUpdate(      restaurantId,      { rating: newRating }    );    return NextResponse.json({ success: true, data: review });  } catch (error: any) {    console.error('Error updating review:', error);    if (error.name === 'ValidationError') {      const validationErrors = Object.values(error.errors).map((err: any) => err.message);      return NextResponse.json(        { success: false, message: validationErrors.join(', ') },        { status: 400 }      );    }    return NextResponse.json(      { success: false, message: 'Failed to update review' },      { status: 500 }    );  }}export async function DELETE(  req: NextRequest,  { params }: { params: { id: string } }) {  try {    await connectDB();    const review = await Review.findById(params.id);    if (!review) {      return NextResponse.json(        { success: false, message: 'Review not found' },        { status: 404 }      );    }    const restaurantId = review.restaurant;    await Review.findByIdAndDelete(params.id);    await Restaurant.findByIdAndUpdate(      restaurantId,      {         $pull: { reviews: params.id },        $inc: { totalReviews: -1 }       }    );    const allReviews = await Review.find({ restaurant: restaurantId });    let newRating = 0;    if (allReviews.length > 0) {      const ratingSum = allReviews.reduce((sum, item) => sum + item.rating, 0);      newRating = ratingSum / allReviews.length;    }    await Restaurant.findByIdAndUpdate(      restaurantId,      { rating: newRating }    );    return NextResponse.json({      success: true,      message: 'Review deleted successfully'    });  } catch (error) {    console.error('Error deleting review:', error);    return NextResponse.json(      { success: false, message: 'Failed to delete review' },      { status: 500 }    );  }} 